(* HelloWorld contract *)

import ListUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library HelloWorld

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let not_owner_code = Int32 1
let set_hello_code = Int32 2

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract HelloWorld
(owner: ByStr20)

field welcome_msg : String = ""

transition setHello (msg : String)
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    e1 = {_eventname : "setHelloFailure"; caller : _sender; code : not_owner_code};
    event e1
  | True =>
    welcome_msg := msg;
    e2 = {_eventname : "setHelloSuccess"; caller : _sender; msgstr : msg};
    event e2
  end
end

transition getHello ()
    r <- welcome_msg;
    e = {_eventname : "getHelloSuccess"; caller : _sender; msg : r};
    event e;
    msg = {_tag : "callBackHello"; _recipient : _sender; _amount : Uint128 0; msg : r};
    msgs = one_msg msg;
    send msgs
end
