import ListUtils PairUtils NatUtils

library Distribution


let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}
let zero = Uint128 0
let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let not_owner_code = Int32 1 
let newly_created_code = Int32 2
let succeed_add_code = Int32 3
    

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Distribution
(initialOwner : ByStr20)
 

(* Initial balance is t stated explicitly: it's initialized when creating the contract. *)

(*  struct commitscore plannerScore evaluaterscore totalLevel*)
field contributorScore :
    Map ByStr20 (Map (ByStr20) (Pair (Pair(Uint128) (Uint128)) (Pair(Uint128) (Uint128))))
   = Emp ByStr20 (Map (ByStr20) (Pair (Pair(Uint128) (Uint128))  (Pair(Uint128) (Uint128))))


(* token is mintable and inflatable. inital token supply is 20 million *)
(* owner ship is transferable initialOwner*)
field owner :  ByStr20  =  initialOwner
field ze : Uint128 = Uint128 0


field unSetteledVoteList = 
   List
     Pair
     (
        Pair
          (
            Pair()
            Pair()
          )
        Pair
          (
            Pair()
            Pair()
          )
     )




(*ToDo: まず使用する変数とデータ構造を確定*)
(*      次にデータにアクセスするための関数を作成*)
(*      具体的なtransitionを記述*)


(*未反映のvoteリストを作成*)
(*使用する変数を記述*)
end


transition operatorOfStruct()
(*transitionではなく、Pairを効果的に動かすlibrary *)
(*structの個数を確定させたら、それぞれの要素にアクセスする関数を予め作成*)

transition computeRewardScore(userAddress: ByStr20, communityAddress: ByStr20, 
                               planId: ByStr20, votedScore: Uint128, votedUser: ByStr20,
                               userId: ByStr20, commentId : String)
                               

  (*１.活動があったコミュニティのアドレス一覧から、HistoryのMapを呼び出す→ この辺はフロント側からやる*)
  (*1 Mapのfoldはきついので、未反映のリストをfoldする*)

  (*2. 未反映の貢献リストがあるので、それをmapする処理を書く*)
  (*Unsettled = List  communityId planId commentId userId authorId votedScore createdAt*)

  unsetteled <- unSetteledVoteList;
  historyAddress <- historyContract;
  let evaluateCommit = @list_map Pair(Pair(Uint128 Uint128) Pair(Uint128 Uint128));
  let f = 
    func(a : Int32) => 
    let gettedValue = builtin get map a in
    let evaluatedScore = builtin add gettedValue Uint128 0 in
    evaluatedScore

    let messageList = Nil {Message};
    Cons {Message} messageList messageList (*new messaage*)


  let evaluatedList  = evaluateCommit f unsetteled;

  
  let getAndDoCommitedU serList = 
      fun(list_item: ByStr20) =>
        msg = {_tag : "return history  data"; 
               _recipient : historyAddress; 
               _amount : Uint128 0; 
               userID: Uint128 0, 
               communityId: Uint128 0,
               planID: Uint128 0, };
        msgs = one_msg msg;
        send msgs
end

transition  acceptCommunityHistory(userId: ByStr20, commnetId: String, 
                                   voter_count: Uint128, commiterBasePoint: Uint128,
                                   voter_BasePoint:Uint128, planId: ByStr20, votedScore:Uint128, 
                                   votedUser:Uint128
                                   )

     msg = {_tag : "getTotalCommitScore"; 
               _recipient : historyAddress; 
               _amount : Uint128 0; 
               userID: Uint128 0, 
               communityId: Uint128 0,
               planID: Uint128 0, };
        msgs = one_msg msg;
        send msgs
  (*commitHistory[userID][commentID] = List communityId planID commnetID userID authorID totalVotedScore basePoint votedList*)
  (*globalの変数を呼び出す処理をここに書く？*)
end


transition  AcceptGlobalVariableForReward(totalCommitScore: Uint128)

  (*4.未反映の貢献を追加したときの増加分に応じて報酬額を決定→plan commit voterの報酬比率を決定*)
  (*basePoint votedScore numberOfPeople Some Global variable(TotalShareOfCommitScore)*)
  (*5 コミットのリストを更新（投票はvotedListに詳細をコピーして保存*)
  (*問題点 ユーザーがどれに投票したかを一気に取得する方法が無くなってしまう*)

  (*6.Listを削除*)
  (*7. commitScoreへ追加分の報酬額を反映*)
  (*8 活動があったコミュニティのリストを削除*)
  (*9 報酬額決定後の動きについて、所持金額、コミット履歴、voteリスト、プランの詳細の4つを変更するmsgリストを作成*)
end


                

