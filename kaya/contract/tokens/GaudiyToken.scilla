(* This contract implements a fungible token interface a la ERC20.*)
(* This contract does not fire events *)


(***************************************************)
(*               Associated library                *)
(***************************************************)

import BoolUtils

library FungibleToken

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

let no_msg = Nil {Message}

let min_int =
  fun (a : Uint128) => fun (b : Uint128) =>
  let alt = builtin lt a b in
  match alt with
  | True =>
    a
  | False =>
    b
  end

let le_int =
  fun (a : Uint128) => fun (b : Uint128) =>
    let x = builtin lt a b in
    match x with
    | True => True
    | False =>
      let y = builtin eq a b in
      match y with
      | True => True
      | False => False
      end
    end


let not_owner_code = Int32 1 
    

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract FungibleToken
(initialOwner : ByStr20,
 initialTokens: Uint128
)

(* Initial balance is not stated explicitly: it's initialized when creating the contract. *)

field balances : Map ByStr20 Uint128 =
  let m = Emp ByStr20 Uint128 in
    builtin put m initialOwner initialTokens
field allowed : Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)
field inflationRate : Uint128 = Uint128 10

(* token is mintable and inflatable. inital token supply is 20 million *)
field total_tokens : Uint128 =  initialTokens
(* owner ship is transferable *)
field owner :  ByStr20  =  initialOwner


transition getInflateRate ()
  rate <- inflationRate;
  msg = {_tag : "Main";
         _recipient : _sender; 
         _amount : Uint128 0; 
         rate :  rate };
  msgs = one_msg msg;
  send msgs
end


transition transferOwnerShip (newOwner : ByStr20)
  now_owner <- owner;
  is_owner = builtin eq now_owner _sender;
  match is_owner with
  | True => 
      owner := newOwner;
      msg = {_tag : "Main";
             _recipient : _sender;
             _amount : Uint128 0;
             owner : newOwner };
      msgs = one_msg msg;
      send msgs
    end
end


(*add issue function *)
transition issue(issueAmount : Uint128)
  token_owner <- owner;
  is_owner = builtin eq token_owner _sender;
  ttl_token <- total_tokens;
  bl <- balances;

  match is_owner with
  | True =>
    (* mint total_token supply*)
    owner_val = builtin get bl token_owner;
    
    match owner_val with
    | Some oval =>
        new_total = builtin add ttl_token issueAmount;
        total_tokens := new_total;
        new_owner_val = builtin add oval issueAmount;
        new_balances = builtin put bl token_owner new_owner_val;
        balances := new_balances;

    (*send result*)
        msg = {_tag : "Main";
               _recipient : _sender; 
               _amount : Uint128 0
        };
        msgs = one_msg msg;
        send msgs
    | None => 
             msg = {_tag : "Main";
             _recipient : _sender; 
             _amount : Uint128 0
             };
        msgs = one_msg msg;
        send msgs
    end
 | False =>
    msg = {_tag : "Main"; 
           _recipient : _sender; 
           _amount : Uint128 0; 
           _code : not_owner_code
    };
    msgs = one_msg msg;
    send msgs
  end
end

transition burn(issueAmount : Uint128)
  token_owner <- owner;
  is_owner = builtin eq token_owner _sender;
  ttl_token <- total_tokens;
  bl <- balances;

  match is_owner with
  | True =>
    (* mint total_token supply*)
    owner_val = builtin get bl token_owner;
    
    match owner_val with
    | Some oval =>
        can_sub = builtin lt ttl_token issueAmount;
        match can_sub with
        | True =>
            new_total = builtin sub ttl_token issueAmount;
            total_tokens := new_total;
            new_owner_val = builtin sub oval issueAmount;
            new_balances = builtin put bl token_owner new_owner_val;
            balances := new_balances;
                (*send result*)
            msg = {_tag : "Main";
                   _recipient : _sender; 
                   _amount : Uint128 0
                  };
            msgs = one_msg msg;
            send msgs


        | False =>
            msg = {_tag : "Main";
                   _recipient : _sender; 
                   _amount : Uint128 0
                  };
            msgs = one_msg msg;
            send msgs
        end
    | None => 
        msg = {_tag : "Main";
               _recipient : _sender; 
               _amount : Uint128 0
              };
        msgs = one_msg msg;
        send msgs
    end
 | False =>
    msg = {_tag : "Main"; 
           _recipient : _sender; 
           _amount : Uint128 0; 
           _code : not_owner_code
    };
    msgs = one_msg msg;
    send msgs
  end
end

transition BalanceOf (tokenOwner : ByStr20)
  bl <- balances;
  val = builtin get bl tokenOwner;
  match val with
  | Some v =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; bal : v };
    msgs = one_msg msg;
    send msgs
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; bal : Uint128 0 };
    msgs = one_msg msg;
    send msgs
  end
end


transition TotalSupply ()
  ttl <- total_tokens;
  msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; total_tokens : ttl};
  msgs = one_msg msg;
  send msgs
end

transition Transfer (to : ByStr20, tokens : Uint128)
  bl <- balances;
  bal = builtin get bl _sender;
  match bal with
  | Some b =>
    can_do = le_int tokens b;
    match can_do with
    | True =>
      (* subtract tokens from _sender and add it to to *)
      new_sender_bal = builtin sub b tokens;
      new_balances = builtin put bl _sender new_sender_bal;
      to_bal = builtin get new_balances to;
      match to_bal with
      | Some x =>
        new_to_bal = builtin add x tokens;
        new_balances2 = builtin put new_balances to new_to_bal;
        balances := new_balances2
      | None =>
        new_balances3 = builtin put new_balances to tokens;
        balances := new_balances3
      end;
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : tokens };
      msgs = one_msg msg;
      send msgs
    | False =>
      (* balance not sufficient. *)
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : Uint128 0 };
      msgs = one_msg msg;
      send msgs
    end
  | None =>
    (* no balance record, can't transfer *)
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; transferred : Uint128 0 };
    msgs = one_msg msg;
    send msgs
  end
end

transition TransferFrom (from : ByStr20, to : ByStr20, tokens : Uint128)
  bl <- balances;
  al <- allowed;
  m_disallowed = "Transfer not allowed";
  bal = builtin get bl from;
  (* Check if _sender has been authorized by "from" *)
  allowed_from = builtin get al from;
  match allowed_from with
  | Some m =>
    (* How many tokens has _sender been authorized to transfer, by "from" *)
    sender_allowed_from = builtin get m _sender;
    all = Pair { (Option Uint128) (Option Uint128)} bal sender_allowed_from;
    match all with
    | Pair (Some a) (Some b) =>
      (* We can only transfer the minimum of available or authorized tokens *)
      t = min_int a b;
      can_do = le_int tokens t;
      match can_do with
      | True =>
        (* tokens is what we should subtract from "from" and add to "to" *)
        new_from_bal = builtin sub a tokens;
        balances_1 = builtin put bl from new_from_bal;
        balances := balances_1;
        to_bal = builtin get balances_1 to;
        match to_bal with
        | Some tb =>
          to_bal_new = builtin add tb tokens;
          balances_2 = builtin put balances_1 to to_bal_new;
          balances := balances_2;
          send no_msg
        | None =>
          (* "to" has no balance. So just set it to tokens *)
          balances_3 = builtin put balances_1 to tokens;
          balances := balances_3;
          send no_msg
        end;
        (* reduce "allowed" by "tokens" *)
        new_allowed = builtin sub b tokens;
        new_m = builtin put m _sender new_allowed;
        new_allowed = builtin put al from new_m;
        allowed := new_allowed
      | False =>
        msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
        msgs = one_msg msg;
        send msgs
      end
    | _ =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
      msgs = one_msg msg;
      send msgs
    end
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; message : m_disallowed };
    msgs = one_msg msg;
    send msgs
  end
end

transition Approve (spender : ByStr20, tokens : Uint128)
  al <- allowed;
  sender_map = builtin get al _sender;
  match sender_map with
  | Some m =>
    allowed_to_spender = builtin put m spender tokens;
    allowed_new = builtin put al _sender allowed_to_spender;
    allowed := allowed_new;
    send no_msg
  | None =>
    allowed_to_spender = let m = Emp ByStr20 Uint128 in builtin put m spender tokens;
    allowed_new = builtin put al _sender allowed_to_spender;
    allowed := allowed_new;
    send no_msg
  end
end

transition Allowance (tokenOwner : ByStr20, spender : ByStr20)
  al <- allowed;
  towner_map = builtin get al tokenOwner;
  match towner_map with
  | Some m =>
    spender_allowance = builtin get m spender;
    match spender_allowance with
    | Some n =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; allowed : n };
      msgs = one_msg msg;
      send msgs
    | None =>
      msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; allowed : Uint128 0 };
      msgs = one_msg msg;
      send msgs
    end
  | None =>
    msg = { _tag : "Main"; _recipient : _sender; _amount : Uint128 0; allowed : Uint128 0 };
    msgs = one_msg msg;
    send msgs
  end
end
