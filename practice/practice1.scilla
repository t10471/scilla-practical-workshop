(* Jyanken contract *)

import ListUtils BoolUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library JyankenGame

let one_msg =
  fun (msg : Message) =>
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg

(* 0..rock, 1..scissors, 2..paper *)
let rock = Uint256 0
let scissors = Uint256 1
let paper = Uint256 2

let hands_rock =
  fun (jnr : Uint256) =>
      let ret = builtin eq jnr rock in
      ret

let hands_scissors =
  fun (jnr : Uint256) =>
      let ret = builtin eq jnr scissors in
      ret

let hands_paper =
  fun (jnr : Uint256) =>
      let ret = builtin eq jnr paper in
      ret

let check_hands =
  fun (jnr : Uint256) =>
    (*Add player hand validation*)
    (*INSERT CODE HERE*)


(* player == enemy *)
let checkDraw =
  fun (p1 : Uint256) =>
  fun (p2 : Uint256) =>
      let ret = builtin eq p1 p2 in
      ret

(* player==0&&enemy==1 *)
let win1 =
  fun (p : Uint256) =>
  fun (r : Uint256) =>
      let pl = builtin eq p rock in
      let rd = builtin eq r scissors in
      andb pl rd

(* player==1&&enemy==2 *)
let win2 =
  fun (p : Uint256) =>
  fun (r : Uint256) =>
      let pl = builtin eq p scissors in
      let rd = builtin eq r paper in
      andb pl rd

(* player==2&&enemy==0 *)
let win3 =
  fun (p : Uint256) =>
  fun (r : Uint256) =>
      let pl = builtin eq p paper in
      let rd = builtin eq r rock in
      andb pl rd

let checkWin =
  fun (p : Uint256) =>
  fun (r : Uint256) =>
    (*Add winning / losing check*)
    (*INSERT CODE HERE*)


(* error code *)
let error_hands_code  = Uint32 9


(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract JyankenGame

(owner    : ByStr20)

field previousResult : Int32 = Int32 0

transition playJyanken (_player : Uint256, _enemy: Uint256)

    (* error validation *)
    is_p1Hands_ok = check_hands _player;
    match is_p1Hands_ok with
    | False =>
        msg = {_tag : "Main"; _recipient : _sender; _amount : Uint128 0; code : error_hands_code};
        msgs = one_msg msg;
        e = {_eventname : "bad hand!"; _pH : _player};
        event e;
        send msgs
    | True =>
        (*Add call of winning / losing check*)
        (*Add save result to field value*)
        (*Add an event and announce the result message*)
        (*INSERT CODE HERE*)
        
    end
end
